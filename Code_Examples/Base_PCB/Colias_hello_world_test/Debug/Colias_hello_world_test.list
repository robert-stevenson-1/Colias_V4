
Colias_hello_world_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b98  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d20  08004d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d60  08004d60  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d60  08004d60  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d60  08004d60  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d64  08004d64  00005d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001e4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f080  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cea  00000000  00000000  000150bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00016da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a85  00000000  00000000  00017af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002016e  00000000  00000000  00018575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010751  00000000  00000000  000386e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e4f  00000000  00000000  00048e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010fc83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000384c  00000000  00000000  0010fcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00113514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d08 	.word	0x08004d08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d08 	.word	0x08004d08

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fd47 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f875 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fad1 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001da:	f000 f8cd 	bl	8000378 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001de:	f000 f93b 	bl	8000458 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 80001e2:	f000 fa9b 	bl	800071c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80001e6:	f000 f995 	bl	8000514 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ea:	f000 fa15 	bl	8000618 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t message[] = "hello\r\n";
 80001ee:	4a2f      	ldr	r2, [pc, #188]	@ (80002ac <main+0xe4>)
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001f6:	e883 0003 	stmia.w	r3, {r0, r1}

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001fa:	2100      	movs	r1, #0
 80001fc:	482c      	ldr	r0, [pc, #176]	@ (80002b0 <main+0xe8>)
 80001fe:	f003 fa0b 	bl	8003618 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000202:	2104      	movs	r1, #4
 8000204:	482a      	ldr	r0, [pc, #168]	@ (80002b0 <main+0xe8>)
 8000206:	f003 fa07 	bl	8003618 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800020a:	2100      	movs	r1, #0
 800020c:	4829      	ldr	r0, [pc, #164]	@ (80002b4 <main+0xec>)
 800020e:	f003 fa03 	bl	8003618 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000212:	2104      	movs	r1, #4
 8000214:	4827      	ldr	r0, [pc, #156]	@ (80002b4 <main+0xec>)
 8000216:	f003 f9ff 	bl	8003618 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(PIN_MOTOR_nSLEEP_OUT_GPIO_Port, PIN_MOTOR_nSLEEP_OUT_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	2180      	movs	r1, #128	@ 0x80
 800021e:	4826      	ldr	r0, [pc, #152]	@ (80002b8 <main+0xf0>)
 8000220:	f001 fd7c 	bl	8001d1c <HAL_GPIO_WritePin>

  int32_t leftMotorPWM = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Transmit "hello" via UART */
	 HAL_UART_Transmit(&huart1, message, sizeof(message) - 1, HAL_MAX_DELAY); // Transmit "hello"
 8000228:	1d39      	adds	r1, r7, #4
 800022a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800022e:	2207      	movs	r2, #7
 8000230:	4822      	ldr	r0, [pc, #136]	@ (80002bc <main+0xf4>)
 8000232:	f004 f961 	bl	80044f8 <HAL_UART_Transmit>
	 HAL_GPIO_TogglePin(PIN_RED_STATUS_LED_OUT_GPIO_Port, PIN_RED_STATUS_LED_OUT_Pin);
 8000236:	2102      	movs	r1, #2
 8000238:	481f      	ldr	r0, [pc, #124]	@ (80002b8 <main+0xf0>)
 800023a:	f001 fd87 	bl	8001d4c <HAL_GPIO_TogglePin>

	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500);
 800023e:	4b1c      	ldr	r3, [pc, #112]	@ (80002b0 <main+0xe8>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000246:	639a      	str	r2, [r3, #56]	@ 0x38
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8000248:	4b1a      	ldr	r3, [pc, #104]	@ (80002b4 <main+0xec>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000250:	639a      	str	r2, [r3, #56]	@ 0x38

//	 TIM2->CCR2 = PWM_MAX/2;
	 HAL_Delay(1000); // Delay 1 second
 8000252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000256:	f000 fd69 	bl	8000d2c <HAL_Delay>

	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800025a:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <main+0xe8>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2200      	movs	r2, #0
 8000260:	639a      	str	r2, [r3, #56]	@ 0x38
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000262:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <main+0xec>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2200      	movs	r2, #0
 8000268:	639a      	str	r2, [r3, #56]	@ 0x38
//	 TIM2->CCR2 = 0;
	 HAL_Delay(1000); // Delay 1 second
 800026a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800026e:	f000 fd5d 	bl	8000d2c <HAL_Delay>

	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8000272:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <main+0xe8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800027a:	635a      	str	r2, [r3, #52]	@ 0x34
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800027c:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <main+0xec>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000284:	635a      	str	r2, [r3, #52]	@ 0x34
//	 TIM2->CCR2 = PWM_MAX/2;
	 HAL_Delay(1000); // Delay 1 second
 8000286:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800028a:	f000 fd4f 	bl	8000d2c <HAL_Delay>

	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800028e:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <main+0xe8>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2200      	movs	r2, #0
 8000294:	635a      	str	r2, [r3, #52]	@ 0x34
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000296:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <main+0xec>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2200      	movs	r2, #0
 800029c:	635a      	str	r2, [r3, #52]	@ 0x34
//	 TIM2->CCR2 = 0;
	 HAL_Delay(1000); // Delay 1 second
 800029e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a2:	f000 fd43 	bl	8000d2c <HAL_Delay>
	 HAL_UART_Transmit(&huart1, message, sizeof(message) - 1, HAL_MAX_DELAY); // Transmit "hello"
 80002a6:	bf00      	nop
 80002a8:	e7be      	b.n	8000228 <main+0x60>
 80002aa:	bf00      	nop
 80002ac:	08004d20 	.word	0x08004d20
 80002b0:	200000c8 	.word	0x200000c8
 80002b4:	20000114 	.word	0x20000114
 80002b8:	48000400 	.word	0x48000400
 80002bc:	20000160 	.word	0x20000160

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b096      	sub	sp, #88	@ 0x58
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002ca:	2228      	movs	r2, #40	@ 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f004 fced 	bl	8004cae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	f107 031c 	add.w	r3, r7, #28
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e4:	463b      	mov	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]
 80002f2:	615a      	str	r2, [r3, #20]
 80002f4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f6:	2302      	movs	r3, #2
 80002f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000306:	2300      	movs	r3, #0
 8000308:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800030a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800030e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fd33 	bl	8001d80 <HAL_RCC_OscConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000320:	f000 fa9c 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	230f      	movs	r3, #15
 8000326:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000328:	2302      	movs	r3, #2
 800032a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000334:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033a:	f107 031c 	add.w	r3, r7, #28
 800033e:	2102      	movs	r1, #2
 8000340:	4618      	mov	r0, r3
 8000342:	f002 fd5b 	bl	8002dfc <HAL_RCC_ClockConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800034c:	f000 fa86 	bl	800085c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000350:	2381      	movs	r3, #129	@ 0x81
 8000352:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800035c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035e:	463b      	mov	r3, r7
 8000360:	4618      	mov	r0, r3
 8000362:	f002 ff6b 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800036c:	f000 fa76 	bl	800085c <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3758      	adds	r7, #88	@ 0x58
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	@ 0x28
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800037e:	f107 031c 	add.w	r3, r7, #28
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
 8000398:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800039a:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <MX_ADC1_Init+0xdc>)
 800039c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ae:	4b29      	ldr	r3, [pc, #164]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003b4:	4b27      	ldr	r3, [pc, #156]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ba:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003bc:	2200      	movs	r2, #0
 80003be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c2:	4b24      	ldr	r3, [pc, #144]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c8:	4b22      	ldr	r3, [pc, #136]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ce:	4b21      	ldr	r3, [pc, #132]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003da:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003e4:	2204      	movs	r2, #4
 80003e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ee:	4b19      	ldr	r3, [pc, #100]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003f4:	4817      	ldr	r0, [pc, #92]	@ (8000454 <MX_ADC1_Init+0xdc>)
 80003f6:	f000 fcbd 	bl	8000d74 <HAL_ADC_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000400:	f000 fa2c 	bl	800085c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000404:	2300      	movs	r3, #0
 8000406:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000408:	f107 031c 	add.w	r3, r7, #28
 800040c:	4619      	mov	r1, r3
 800040e:	4811      	ldr	r0, [pc, #68]	@ (8000454 <MX_ADC1_Init+0xdc>)
 8000410:	f001 f900 	bl	8001614 <HAL_ADCEx_MultiModeConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800041a:	f000 fa1f 	bl	800085c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800041e:	2301      	movs	r3, #1
 8000420:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000422:	2301      	movs	r3, #1
 8000424:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	@ (8000454 <MX_ADC1_Init+0xdc>)
 800043c:	f000 fe2c 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000446:	f000 fa09 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3728      	adds	r7, #40	@ 0x28
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000028 	.word	0x20000028

08000458 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800045e:	463b      	mov	r3, r7
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
 800046c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800046e:	4b27      	ldr	r3, [pc, #156]	@ (800050c <MX_ADC2_Init+0xb4>)
 8000470:	4a27      	ldr	r2, [pc, #156]	@ (8000510 <MX_ADC2_Init+0xb8>)
 8000472:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000474:	4b25      	ldr	r3, [pc, #148]	@ (800050c <MX_ADC2_Init+0xb4>)
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800047a:	4b24      	ldr	r3, [pc, #144]	@ (800050c <MX_ADC2_Init+0xb4>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000480:	4b22      	ldr	r3, [pc, #136]	@ (800050c <MX_ADC2_Init+0xb4>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000486:	4b21      	ldr	r3, [pc, #132]	@ (800050c <MX_ADC2_Init+0xb4>)
 8000488:	2200      	movs	r2, #0
 800048a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800048c:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <MX_ADC2_Init+0xb4>)
 800048e:	2200      	movs	r2, #0
 8000490:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000494:	4b1d      	ldr	r3, [pc, #116]	@ (800050c <MX_ADC2_Init+0xb4>)
 8000496:	2200      	movs	r2, #0
 8000498:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800049a:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <MX_ADC2_Init+0xb4>)
 800049c:	2201      	movs	r2, #1
 800049e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <MX_ADC2_Init+0xb4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80004a6:	4b19      	ldr	r3, [pc, #100]	@ (800050c <MX_ADC2_Init+0xb4>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004ac:	4b17      	ldr	r3, [pc, #92]	@ (800050c <MX_ADC2_Init+0xb4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b4:	4b15      	ldr	r3, [pc, #84]	@ (800050c <MX_ADC2_Init+0xb4>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004ba:	4b14      	ldr	r3, [pc, #80]	@ (800050c <MX_ADC2_Init+0xb4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004c0:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_ADC2_Init+0xb4>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004c6:	4811      	ldr	r0, [pc, #68]	@ (800050c <MX_ADC2_Init+0xb4>)
 80004c8:	f000 fc54 	bl	8000d74 <HAL_ADC_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80004d2:	f000 f9c3 	bl	800085c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004da:	2301      	movs	r3, #1
 80004dc:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004ee:	463b      	mov	r3, r7
 80004f0:	4619      	mov	r1, r3
 80004f2:	4806      	ldr	r0, [pc, #24]	@ (800050c <MX_ADC2_Init+0xb4>)
 80004f4:	f000 fdd0 	bl	8001098 <HAL_ADC_ConfigChannel>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80004fe:	f000 f9ad 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000078 	.word	0x20000078
 8000510:	50000100 	.word	0x50000100

08000514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08e      	sub	sp, #56	@ 0x38
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000546:	4b33      	ldr	r3, [pc, #204]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000548:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800054c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800054e:	4b31      	ldr	r3, [pc, #196]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000550:	223f      	movs	r2, #63	@ 0x3f
 8000552:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000554:	4b2f      	ldr	r3, [pc, #188]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800055a:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <MX_TIM2_Init+0x100>)
 800055c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000560:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000562:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000568:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <MX_TIM2_Init+0x100>)
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800056e:	4829      	ldr	r0, [pc, #164]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000570:	f002 ff9a 	bl	80034a8 <HAL_TIM_Base_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800057a:	f000 f96f 	bl	800085c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800057e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000582:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000588:	4619      	mov	r1, r3
 800058a:	4822      	ldr	r0, [pc, #136]	@ (8000614 <MX_TIM2_Init+0x100>)
 800058c:	f003 fa44 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000596:	f000 f961 	bl	800085c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800059a:	481e      	ldr	r0, [pc, #120]	@ (8000614 <MX_TIM2_Init+0x100>)
 800059c:	f002 ffdb 	bl	8003556 <HAL_TIM_PWM_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80005a6:	f000 f959 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	4619      	mov	r1, r3
 80005b8:	4816      	ldr	r0, [pc, #88]	@ (8000614 <MX_TIM2_Init+0x100>)
 80005ba:	f003 fee1 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80005c4:	f000 f94a 	bl	800085c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c8:	2360      	movs	r3, #96	@ 0x60
 80005ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	480d      	ldr	r0, [pc, #52]	@ (8000614 <MX_TIM2_Init+0x100>)
 80005e0:	f003 f906 	bl	80037f0 <HAL_TIM_PWM_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80005ea:	f000 f937 	bl	800085c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	2204      	movs	r2, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <MX_TIM2_Init+0x100>)
 80005f6:	f003 f8fb 	bl	80037f0 <HAL_TIM_PWM_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000600:	f000 f92c 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000606:	f000 fa03 	bl	8000a10 <HAL_TIM_MspPostInit>

}
 800060a:	bf00      	nop
 800060c:	3738      	adds	r7, #56	@ 0x38
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000c8 	.word	0x200000c8

08000618 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	@ 0x38
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_TIM3_Init+0xfc>)
 800064c:	4a32      	ldr	r2, [pc, #200]	@ (8000718 <MX_TIM3_Init+0x100>)
 800064e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000650:	4b30      	ldr	r3, [pc, #192]	@ (8000714 <MX_TIM3_Init+0xfc>)
 8000652:	223f      	movs	r2, #63	@ 0x3f
 8000654:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_TIM3_Init+0xfc>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800065c:	4b2d      	ldr	r3, [pc, #180]	@ (8000714 <MX_TIM3_Init+0xfc>)
 800065e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000662:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b2b      	ldr	r3, [pc, #172]	@ (8000714 <MX_TIM3_Init+0xfc>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <MX_TIM3_Init+0xfc>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000670:	4828      	ldr	r0, [pc, #160]	@ (8000714 <MX_TIM3_Init+0xfc>)
 8000672:	f002 ff19 	bl	80034a8 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800067c:	f000 f8ee 	bl	800085c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800068a:	4619      	mov	r1, r3
 800068c:	4821      	ldr	r0, [pc, #132]	@ (8000714 <MX_TIM3_Init+0xfc>)
 800068e:	f003 f9c3 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000698:	f000 f8e0 	bl	800085c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800069c:	481d      	ldr	r0, [pc, #116]	@ (8000714 <MX_TIM3_Init+0xfc>)
 800069e:	f002 ff5a 	bl	8003556 <HAL_TIM_PWM_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80006a8:	f000 f8d8 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4816      	ldr	r0, [pc, #88]	@ (8000714 <MX_TIM3_Init+0xfc>)
 80006bc:	f003 fe60 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80006c6:	f000 f8c9 	bl	800085c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ca:	2360      	movs	r3, #96	@ 0x60
 80006cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <MX_TIM3_Init+0xfc>)
 80006e2:	f003 f885 	bl	80037f0 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80006ec:	f000 f8b6 	bl	800085c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	2204      	movs	r2, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <MX_TIM3_Init+0xfc>)
 80006f8:	f003 f87a 	bl	80037f0 <HAL_TIM_PWM_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000702:	f000 f8ab 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000706:	4803      	ldr	r0, [pc, #12]	@ (8000714 <MX_TIM3_Init+0xfc>)
 8000708:	f000 f982 	bl	8000a10 <HAL_TIM_MspPostInit>

}
 800070c:	bf00      	nop
 800070e:	3738      	adds	r7, #56	@ 0x38
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000114 	.word	0x20000114
 8000718:	40000400 	.word	0x40000400

0800071c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <MX_USART1_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000760:	f003 fe7c 	bl	800445c <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f877 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000160 	.word	0x20000160
 8000778:	40013800 	.word	0x40013800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <MX_GPIO_Init+0xd8>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a2f      	ldr	r2, [pc, #188]	@ (8000854 <MX_GPIO_Init+0xd8>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <MX_GPIO_Init+0xd8>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <MX_GPIO_Init+0xd8>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a29      	ldr	r2, [pc, #164]	@ (8000854 <MX_GPIO_Init+0xd8>)
 80007b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <MX_GPIO_Init+0xd8>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_BUMPER_EMIT_OUT_Pin|PIN_FRONT_PIN_STAND_LED_OUT_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f241 0108 	movw	r1, #4104	@ 0x1008
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007cc:	f001 faa6 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PIN_BOTTOM_LED_OUT_Pin|PIN_RED_STATUS_LED_OUT_Pin|PIN_MOTOR_nSLEEP_OUT_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2183      	movs	r1, #131	@ 0x83
 80007d4:	4820      	ldr	r0, [pc, #128]	@ (8000858 <MX_GPIO_Init+0xdc>)
 80007d6:	f001 faa1 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN_BUMPER_EMIT_OUT_Pin PIN_FRONT_PIN_STAND_LED_OUT_Pin */
  GPIO_InitStruct.Pin = PIN_BUMPER_EMIT_OUT_Pin|PIN_FRONT_PIN_STAND_LED_OUT_Pin;
 80007da:	f241 0308 	movw	r3, #4104	@ 0x1008
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f6:	f001 f91f 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_IR_LED_IN_Pin PIN_INT_IN_Pin */
  GPIO_InitStruct.Pin = PIN_IR_LED_IN_Pin|PIN_INT_IN_Pin;
 80007fa:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000812:	f001 f911 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_BOTTOM_LED_OUT_Pin PIN_RED_STATUS_LED_OUT_Pin PIN_MOTOR_nSLEEP_OUT_Pin */
  GPIO_InitStruct.Pin = PIN_BOTTOM_LED_OUT_Pin|PIN_RED_STATUS_LED_OUT_Pin|PIN_MOTOR_nSLEEP_OUT_Pin;
 8000816:	2383      	movs	r3, #131	@ 0x83
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	480a      	ldr	r0, [pc, #40]	@ (8000858 <MX_GPIO_Init+0xdc>)
 800082e:	f001 f903 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_MOTOR_nFAULT_IN_Pin */
  GPIO_InitStruct.Pin = PIN_MOTOR_nFAULT_IN_Pin;
 8000832:	2340      	movs	r3, #64	@ 0x40
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PIN_MOTOR_nFAULT_IN_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_GPIO_Init+0xdc>)
 8000846:	f001 f8f7 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_MspInit+0x44>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_MspInit+0x44>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x44>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x44>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80008d0:	d12e      	bne.n	8000930 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008d2:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <HAL_ADC_MspInit+0xf0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a31      	ldr	r2, [pc, #196]	@ (80009a0 <HAL_ADC_MspInit+0xf0>)
 80008da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008dc:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <HAL_ADC_MspInit+0xf0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10b      	bne.n	80008fc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008e4:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	4a2e      	ldr	r2, [pc, #184]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	6153      	str	r3, [r2, #20]
 80008f0:	4b2c      	ldr	r3, [pc, #176]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b29      	ldr	r3, [pc, #164]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a28      	ldr	r2, [pc, #160]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 8000902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000906:	6153      	str	r3, [r2, #20]
 8000908:	4b26      	ldr	r3, [pc, #152]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PIN_BUMPER_R_ADC1_IN_Pin|PIN_BUMPER_M_ADC1_IN_Pin|PIN_BUMPER_L_ADC1_IN_Pin;
 8000914:	2307      	movs	r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000918:	2303      	movs	r3, #3
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092a:	f001 f885 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800092e:	e032      	b.n	8000996 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <HAL_ADC_MspInit+0xf8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12d      	bne.n	8000996 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <HAL_ADC_MspInit+0xf0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0xf0>)
 8000942:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <HAL_ADC_MspInit+0xf0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d10b      	bne.n	8000964 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	4a14      	ldr	r2, [pc, #80]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000956:	6153      	str	r3, [r2, #20]
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 800096a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096e:	6153      	str	r3, [r2, #20]
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_ADC_MspInit+0xf4>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PIN_AMB_LIGHT_Q3_ADC2_IN1_Pin|PIN_AMB_LIGHT_Q4_ADC2_IN2_Pin|PIN_BAT_VOLTAGE_ADC2_IN3_Pin;
 800097c:	2370      	movs	r3, #112	@ 0x70
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000992:	f001 f851 	bl	8001a38 <HAL_GPIO_Init>
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	@ 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001e8 	.word	0x200001e8
 80009a4:	40021000 	.word	0x40021000
 80009a8:	50000100 	.word	0x50000100

080009ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009bc:	d10c      	bne.n	80009d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_TIM_Base_MspInit+0x5c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a11      	ldr	r2, [pc, #68]	@ (8000a08 <HAL_TIM_Base_MspInit+0x5c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_TIM_Base_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009d6:	e010      	b.n	80009fa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <HAL_TIM_Base_MspInit+0x60>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d10b      	bne.n	80009fa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_TIM_Base_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_TIM_Base_MspInit+0x5c>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_TIM_Base_MspInit+0x5c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40000400 	.word	0x40000400

08000a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a30:	d13a      	bne.n	8000aa8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a2f      	ldr	r2, [pc, #188]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a29      	ldr	r2, [pc, #164]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PIN_MOTOR_A1_PMW_TIM2_CH1_Pin;
 8000a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PIN_MOTOR_A1_PMW_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a82:	f000 ffd9 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_MOTOR_A2_PMW_TIM2_CH2_Pin;
 8000a86:	2308      	movs	r3, #8
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a96:	2301      	movs	r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PIN_MOTOR_A2_PMW_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4815      	ldr	r0, [pc, #84]	@ (8000af8 <HAL_TIM_MspPostInit+0xe8>)
 8000aa2:	f000 ffc9 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000aa6:	e020      	b.n	8000aea <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <HAL_TIM_MspPostInit+0xec>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d11b      	bne.n	8000aea <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000abc:	6153      	str	r3, [r2, #20]
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_TIM_MspPostInit+0xe4>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PIN_MOTOR_B1_PMW_TIM3_CH1_Pin|PIN_MOTOR_B1_PMW_TIM3_CH2_Pin;
 8000aca:	2330      	movs	r3, #48	@ 0x30
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ada:	2302      	movs	r3, #2
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <HAL_TIM_MspPostInit+0xe8>)
 8000ae6:	f000 ffa7 	bl	8001a38 <HAL_GPIO_Init>
}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	@ 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400
 8000afc:	40000400 	.word	0x40000400

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a18      	ldr	r2, [pc, #96]	@ (8000b80 <HAL_UART_MspInit+0x80>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d129      	bne.n	8000b76 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HAL_UART_MspInit+0x84>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a17      	ldr	r2, [pc, #92]	@ (8000b84 <HAL_UART_MspInit+0x84>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <HAL_UART_MspInit+0x84>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_UART_MspInit+0x84>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a11      	ldr	r2, [pc, #68]	@ (8000b84 <HAL_UART_MspInit+0x84>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_UART_MspInit+0x84>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b64:	2307      	movs	r3, #7
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f000 ff61 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	@ 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 f885 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c10:	f7ff ffea 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f004 f841 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3e:	f7ff fac3 	bl	80001c8 <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c50:	08004d68 	.word	0x08004d68
  ldr r2, =_sbss
 8000c54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c58:	200001f0 	.word	0x200001f0

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <HAL_Init+0x28>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	@ (8000c88 <HAL_Init+0x28>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 fead 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fdf4 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 feb7 	bl	8001a1e <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cc8:	f000 fe8d 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200001ec 	.word	0x200001ec

08000d14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200001ec 	.word	0x200001ec

08000d2c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09a      	sub	sp, #104	@ 0x68
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e172      	b.n	800107a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d176      	bne.n	8000e94 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d152      	bne.n	8000e54 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fd71 	bl	80008b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d13b      	bne.n	8000e54 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 fcdf 	bl	80017a0 <ADC_Disable>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d12f      	bne.n	8000e54 <HAL_ADC_Init+0xe0>
 8000df4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d12b      	bne.n	8000e54 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e04:	f023 0302 	bic.w	r3, r3, #2
 8000e08:	f043 0202 	orr.w	r2, r3, #2
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000e1e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e2e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e30:	4b94      	ldr	r3, [pc, #592]	@ (8001084 <HAL_ADC_Init+0x310>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a94      	ldr	r2, [pc, #592]	@ (8001088 <HAL_ADC_Init+0x314>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9a      	lsrs	r2, r3, #18
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e46:	e002      	b.n	8000e4e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f9      	bne.n	8000e48 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e70:	d110      	bne.n	8000e94 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f023 0312 	bic.w	r3, r3, #18
 8000e7a:	f043 0210 	orr.w	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f040 80df 	bne.w	8001060 <HAL_ADC_Init+0x2ec>
 8000ea2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 80da 	bne.w	8001060 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 80d2 	bne.w	8001060 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ec4:	f043 0202 	orr.w	r2, r3, #2
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800108c <HAL_ADC_Init+0x318>)
 8000ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ed8:	d102      	bne.n	8000ee0 <HAL_ADC_Init+0x16c>
 8000eda:	4b6d      	ldr	r3, [pc, #436]	@ (8001090 <HAL_ADC_Init+0x31c>)
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e002      	b.n	8000ee6 <HAL_ADC_Init+0x172>
 8000ee0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000ee4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d108      	bne.n	8000f06 <HAL_ADC_Init+0x192>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d101      	bne.n	8000f06 <HAL_ADC_Init+0x192>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_ADC_Init+0x194>
 8000f06:	2300      	movs	r3, #0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d11c      	bne.n	8000f46 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d010      	beq.n	8000f34 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d107      	bne.n	8000f2e <HAL_ADC_Init+0x1ba>
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Init+0x1ba>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_ADC_Init+0x1bc>
 8000f2e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d108      	bne.n	8000f46 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f44:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7e5b      	ldrb	r3, [r3, #25]
 8000f4a:	035b      	lsls	r3, r3, #13
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000f50:	2a01      	cmp	r2, #1
 8000f52:	d002      	beq.n	8000f5a <HAL_ADC_Init+0x1e6>
 8000f54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f58:	e000      	b.n	8000f5c <HAL_ADC_Init+0x1e8>
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d11b      	bne.n	8000fb2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7e5b      	ldrb	r3, [r3, #25]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d109      	bne.n	8000f96 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f86:	3b01      	subs	r3, #1
 8000f88:	045a      	lsls	r2, r3, #17
 8000f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f92:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f94:	e00d      	b.n	8000fb2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000f9e:	f043 0220 	orr.w	r2, r3, #32
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f043 0201 	orr.w	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d007      	beq.n	8000fca <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d114      	bne.n	8001002 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fe6:	f023 0302 	bic.w	r3, r3, #2
 8000fea:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	039a      	lsls	r2, r3, #14
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ffe:	4313      	orrs	r3, r2
 8001000:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <HAL_ADC_Init+0x320>)
 800100a:	4013      	ands	r3, r2
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001012:	430b      	orrs	r3, r1
 8001014:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10c      	bne.n	8001038 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001024:	f023 010f 	bic.w	r1, r3, #15
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	430a      	orrs	r2, r1
 8001034:	631a      	str	r2, [r3, #48]	@ 0x30
 8001036:	e007      	b.n	8001048 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020f 	bic.w	r2, r2, #15
 8001046:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40
 800105e:	e00a      	b.n	8001076 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	f023 0312 	bic.w	r3, r3, #18
 8001068:	f043 0210 	orr.w	r2, r3, #16
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001070:	2301      	movs	r3, #1
 8001072:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001076:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800107a:	4618      	mov	r0, r3
 800107c:	3768      	adds	r7, #104	@ 0x68
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000
 8001088:	431bde83 	.word	0x431bde83
 800108c:	50000300 	.word	0x50000300
 8001090:	50000100 	.word	0x50000100
 8001094:	fff0c007 	.word	0xfff0c007

08001098 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001098:	b480      	push	{r7}
 800109a:	b09b      	sub	sp, #108	@ 0x6c
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_ConfigChannel+0x22>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e2a1      	b.n	80015fe <HAL_ADC_ConfigChannel+0x566>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f040 8285 	bne.w	80015dc <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d81c      	bhi.n	8001114 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	461a      	mov	r2, r3
 80010ee:	231f      	movs	r3, #31
 80010f0:	4093      	lsls	r3, r2
 80010f2:	43db      	mvns	r3, r3
 80010f4:	4019      	ands	r1, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa00 f203 	lsl.w	r2, r0, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	631a      	str	r2, [r3, #48]	@ 0x30
 8001112:	e063      	b.n	80011dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b09      	cmp	r3, #9
 800111a:	d81e      	bhi.n	800115a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	3b1e      	subs	r3, #30
 8001130:	221f      	movs	r2, #31
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	4019      	ands	r1, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	3b1e      	subs	r3, #30
 800114c:	fa00 f203 	lsl.w	r2, r0, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	635a      	str	r2, [r3, #52]	@ 0x34
 8001158:	e040      	b.n	80011dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b0e      	cmp	r3, #14
 8001160:	d81e      	bhi.n	80011a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	3b3c      	subs	r3, #60	@ 0x3c
 8001176:	221f      	movs	r2, #31
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	4019      	ands	r1, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	3b3c      	subs	r3, #60	@ 0x3c
 8001192:	fa00 f203 	lsl.w	r2, r0, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	639a      	str	r2, [r3, #56]	@ 0x38
 800119e:	e01d      	b.n	80011dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	3b5a      	subs	r3, #90	@ 0x5a
 80011b4:	221f      	movs	r2, #31
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4019      	ands	r1, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	3b5a      	subs	r3, #90	@ 0x5a
 80011d0:	fa00 f203 	lsl.w	r2, r0, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	430a      	orrs	r2, r1
 80011da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 80e5 	bne.w	80013b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	d91c      	bls.n	800122e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6999      	ldr	r1, [r3, #24]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3b1e      	subs	r3, #30
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6898      	ldr	r0, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	3b1e      	subs	r3, #30
 8001220:	fa00 f203 	lsl.w	r2, r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	e019      	b.n	8001262 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6959      	ldr	r1, [r3, #20]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	2207      	movs	r2, #7
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	4019      	ands	r1, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	6898      	ldr	r0, [r3, #8]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	fa00 f203 	lsl.w	r2, r0, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	08db      	lsrs	r3, r3, #3
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	3b01      	subs	r3, #1
 8001280:	2b03      	cmp	r3, #3
 8001282:	d84f      	bhi.n	8001324 <HAL_ADC_ConfigChannel+0x28c>
 8001284:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <HAL_ADC_ConfigChannel+0x1f4>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	0800129d 	.word	0x0800129d
 8001290:	080012bf 	.word	0x080012bf
 8001294:	080012e1 	.word	0x080012e1
 8001298:	08001303 	.word	0x08001303
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001514 <HAL_ADC_ConfigChannel+0x47c>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	0691      	lsls	r1, r2, #26
 80012ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012ae:	430a      	orrs	r2, r1
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012ba:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012bc:	e07b      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012c4:	4b93      	ldr	r3, [pc, #588]	@ (8001514 <HAL_ADC_ConfigChannel+0x47c>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	0691      	lsls	r1, r2, #26
 80012ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012d0:	430a      	orrs	r2, r1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012dc:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012de:	e06a      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80012e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001514 <HAL_ADC_ConfigChannel+0x47c>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	0691      	lsls	r1, r2, #26
 80012f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012f2:	430a      	orrs	r2, r1
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012fe:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001300:	e059      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001308:	4b82      	ldr	r3, [pc, #520]	@ (8001514 <HAL_ADC_ConfigChannel+0x47c>)
 800130a:	4013      	ands	r3, r2
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	0691      	lsls	r1, r2, #26
 8001312:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001314:	430a      	orrs	r2, r1
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001320:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001322:	e048      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	069b      	lsls	r3, r3, #26
 8001334:	429a      	cmp	r2, r3
 8001336:	d107      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001346:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800134e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	069b      	lsls	r3, r3, #26
 8001358:	429a      	cmp	r2, r3
 800135a:	d107      	bne.n	800136c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800136a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001372:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	069b      	lsls	r3, r3, #26
 800137c:	429a      	cmp	r2, r3
 800137e:	d107      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800138e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	069b      	lsls	r3, r3, #26
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d107      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80013b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80013b4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d108      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x33e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x33e>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x340>
 80013d6:	2300      	movs	r3, #0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 810a 	bne.w	80015f2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d00f      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2201      	movs	r2, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001404:	e049      	b.n	800149a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2201      	movs	r2, #1
 8001414:	409a      	lsls	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d91c      	bls.n	8001462 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6999      	ldr	r1, [r3, #24]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1b      	subs	r3, #27
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6898      	ldr	r0, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	3b1b      	subs	r3, #27
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	619a      	str	r2, [r3, #24]
 8001460:	e01b      	b.n	800149a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6959      	ldr	r1, [r3, #20]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	2207      	movs	r2, #7
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	4019      	ands	r1, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6898      	ldr	r0, [r3, #8]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <HAL_ADC_ConfigChannel+0x480>)
 800149c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d105      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d015      	beq.n	80014de <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014b6:	2b11      	cmp	r3, #17
 80014b8:	d105      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	f040 8091 	bne.w	80015f2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80014d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 808a 	bne.w	80015f2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014e6:	d102      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x456>
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <HAL_ADC_ConfigChannel+0x484>)
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x45c>
 80014ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014f2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d10e      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x488>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x488>
 8001510:	2301      	movs	r3, #1
 8001512:	e006      	b.n	8001522 <HAL_ADC_ConfigChannel+0x48a>
 8001514:	83fff000 	.word	0x83fff000
 8001518:	50000300 	.word	0x50000300
 800151c:	50000100 	.word	0x50000100
 8001520:	2300      	movs	r3, #0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d150      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001526:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001528:	2b00      	cmp	r3, #0
 800152a:	d010      	beq.n	800154e <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x4b0>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x4b0>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_ADC_ConfigChannel+0x4b2>
 8001548:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800154a:	2b00      	cmp	r3, #0
 800154c:	d13c      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b10      	cmp	r3, #16
 8001554:	d11d      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x4fa>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800155e:	d118      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001560:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800156a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_ADC_ConfigChannel+0x574>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a27      	ldr	r2, [pc, #156]	@ (8001610 <HAL_ADC_ConfigChannel+0x578>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0c9a      	lsrs	r2, r3, #18
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001582:	e002      	b.n	800158a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3b01      	subs	r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f9      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001590:	e02e      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b11      	cmp	r3, #17
 8001598:	d10b      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x51a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015a2:	d106      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80015ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015b0:	e01e      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d11a      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015c6:	e013      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f043 0220 	orr.w	r2, r3, #32
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80015da:	e00a      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	f043 0220 	orr.w	r2, r3, #32
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80015ee:	e000      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80015fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80015fe:	4618      	mov	r0, r3
 8001600:	376c      	adds	r7, #108	@ 0x6c
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000000 	.word	0x20000000
 8001610:	431bde83 	.word	0x431bde83

08001614 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001614:	b480      	push	{r7}
 8001616:	b099      	sub	sp, #100	@ 0x64
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800162c:	d102      	bne.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800162e:	4b5a      	ldr	r3, [pc, #360]	@ (8001798 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	e002      	b.n	800163a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001634:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001638:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0a2      	b.n	800178a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800164e:	2302      	movs	r3, #2
 8001650:	e09b      	b.n	800178a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d17f      	bne.n	8001768 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d179      	bne.n	8001768 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001674:	4b49      	ldr	r3, [pc, #292]	@ (800179c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001676:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d040      	beq.n	8001702 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001692:	035b      	lsls	r3, r3, #13
 8001694:	430b      	orrs	r3, r1
 8001696:	431a      	orrs	r2, r3
 8001698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800169a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d108      	bne.n	80016bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80016bc:	2300      	movs	r3, #0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d15c      	bne.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80016de:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d14b      	bne.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80016ec:	f023 030f 	bic.w	r3, r3, #15
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	6811      	ldr	r1, [r2, #0]
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	6892      	ldr	r2, [r2, #8]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	431a      	orrs	r2, r3
 80016fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016fe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001700:	e03c      	b.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800170a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800170c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800172e:	2300      	movs	r3, #0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d123      	bne.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d107      	bne.n	8001750 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001750:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	d112      	bne.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001756:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800175e:	f023 030f 	bic.w	r3, r3, #15
 8001762:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001764:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001766:	e009      	b.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f043 0220 	orr.w	r2, r3, #32
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800177a:	e000      	b.n	800177e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800177c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001786:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800178a:	4618      	mov	r0, r3
 800178c:	3764      	adds	r7, #100	@ 0x64
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	50000100 	.word	0x50000100
 800179c:	50000300 	.word	0x50000300

080017a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d108      	bne.n	80017cc <ADC_Disable+0x2c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <ADC_Disable+0x2c>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <ADC_Disable+0x2e>
 80017cc:	2300      	movs	r3, #0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d047      	beq.n	8001862 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030d 	and.w	r3, r3, #13
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d10f      	bne.n	8001800 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0202 	orr.w	r2, r2, #2
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2203      	movs	r2, #3
 80017f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80017f8:	f7ff fa8c 	bl	8000d14 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017fe:	e029      	b.n	8001854 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f043 0210 	orr.w	r2, r3, #16
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e023      	b.n	8001864 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800181c:	f7ff fa7a 	bl	8000d14 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d914      	bls.n	8001854 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d10d      	bne.n	8001854 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	f043 0210 	orr.w	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e007      	b.n	8001864 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d0dc      	beq.n	800181c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	@ (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	@ 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff47 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff5c 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffb0 	bl	800198c <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	e14e      	b.n	8001ce6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8140 	beq.w	8001ce0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_GPIO_Init+0x40>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d130      	bne.n	8001ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 0201 	and.w	r2, r3, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d017      	beq.n	8001b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d123      	bne.n	8001b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	6939      	ldr	r1, [r7, #16]
 8001b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0203 	and.w	r2, r3, #3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 809a 	beq.w	8001ce0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bac:	4b55      	ldr	r3, [pc, #340]	@ (8001d04 <HAL_GPIO_Init+0x2cc>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a54      	ldr	r2, [pc, #336]	@ (8001d04 <HAL_GPIO_Init+0x2cc>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b52      	ldr	r3, [pc, #328]	@ (8001d04 <HAL_GPIO_Init+0x2cc>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc4:	4a50      	ldr	r2, [pc, #320]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bee:	d013      	beq.n	8001c18 <HAL_GPIO_Init+0x1e0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a46      	ldr	r2, [pc, #280]	@ (8001d0c <HAL_GPIO_Init+0x2d4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <HAL_GPIO_Init+0x1dc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a45      	ldr	r2, [pc, #276]	@ (8001d10 <HAL_GPIO_Init+0x2d8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_Init+0x1d8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a44      	ldr	r2, [pc, #272]	@ (8001d14 <HAL_GPIO_Init+0x2dc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_GPIO_Init+0x1d4>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e006      	b.n	8001c1a <HAL_GPIO_Init+0x1e2>
 8001c0c:	2305      	movs	r3, #5
 8001c0e:	e004      	b.n	8001c1a <HAL_GPIO_Init+0x1e2>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e002      	b.n	8001c1a <HAL_GPIO_Init+0x1e2>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_GPIO_Init+0x1e2>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	f002 0203 	and.w	r2, r2, #3
 8001c20:	0092      	lsls	r2, r2, #2
 8001c22:	4093      	lsls	r3, r2
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c2a:	4937      	ldr	r1, [pc, #220]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c38:	4b37      	ldr	r3, [pc, #220]	@ (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c62:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c86:	4a24      	ldr	r2, [pc, #144]	@ (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c8c:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cb0:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cda:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f47f aea9 	bne.w	8001a48 <HAL_GPIO_Init+0x10>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	bf00      	nop
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	48000400 	.word	0x48000400
 8001d10:	48000800 	.word	0x48000800
 8001d14:	48000c00 	.word	0x48000c00
 8001d18:	40010400 	.word	0x40010400

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43d9      	mvns	r1, r3
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	400b      	ands	r3, r1
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d90:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	f001 b823 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001daa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 817d 	beq.w	80020b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dbc:	4bbc      	ldr	r3, [pc, #752]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc8:	4bb9      	ldr	r3, [pc, #740]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d15c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x10e>
 8001dd4:	4bb6      	ldr	r3, [pc, #728]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de0:	d155      	bne.n	8001e8e <HAL_RCC_OscConfig+0x10e>
 8001de2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001de6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0x94>
 8001e0e:	4ba8      	ldr	r3, [pc, #672]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e015      	b.n	8001e40 <HAL_RCC_OscConfig+0xc0>
 8001e14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e18:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e2c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e30:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e44:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001e48:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001e4c:	fa92 f2a2 	rbit	r2, r2
 8001e50:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001e54:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f002 021f 	and.w	r2, r2, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 811f 	beq.w	80020b4 <HAL_RCC_OscConfig+0x334>
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8116 	bne.w	80020b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f000 bfaf 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x12e>
 8001ea0:	4b83      	ldr	r3, [pc, #524]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a82      	ldr	r2, [pc, #520]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e036      	b.n	8001f1c <HAL_RCC_OscConfig+0x19c>
 8001eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x158>
 8001ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7b      	ldr	r2, [pc, #492]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b79      	ldr	r3, [pc, #484]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a78      	ldr	r2, [pc, #480]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e021      	b.n	8001f1c <HAL_RCC_OscConfig+0x19c>
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x184>
 8001eea:	4b71      	ldr	r3, [pc, #452]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a70      	ldr	r2, [pc, #448]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6d      	ldr	r2, [pc, #436]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e00b      	b.n	8001f1c <HAL_RCC_OscConfig+0x19c>
 8001f04:	4b6a      	ldr	r3, [pc, #424]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b67      	ldr	r3, [pc, #412]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a66      	ldr	r2, [pc, #408]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1c:	4b64      	ldr	r3, [pc, #400]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	f023 020f 	bic.w	r2, r3, #15
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	495f      	ldr	r1, [pc, #380]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d059      	beq.n	8001ffa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fee5 	bl	8000d14 <HAL_GetTick>
 8001f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7fe fee0 	bl	8000d14 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	@ 0x64
 8001f5e:	d902      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	f000 bf43 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>
 8001f66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f6a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001f7a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_RCC_OscConfig+0x218>
 8001f92:	4b47      	ldr	r3, [pc, #284]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e015      	b.n	8001fc4 <HAL_RCC_OscConfig+0x244>
 8001f98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f9c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001fac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001fb4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fc8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001fcc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001fd0:	fa92 f2a2 	rbit	r2, r2
 8001fd4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001fd8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001fdc:	fab2 f282 	clz	r2, r2
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f042 0220 	orr.w	r2, r2, #32
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f002 021f 	and.w	r2, r2, #31
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ab      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1d0>
 8001ff8:	e05d      	b.n	80020b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fe8b 	bl	8000d14 <HAL_GetTick>
 8001ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe fe86 	bl	8000d14 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b64      	cmp	r3, #100	@ 0x64
 8002012:	d902      	bls.n	800201a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	f000 bee9 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>
 800201a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800201e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800202e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d102      	bne.n	800204c <HAL_RCC_OscConfig+0x2cc>
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	e015      	b.n	8002078 <HAL_RCC_OscConfig+0x2f8>
 800204c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002050:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002060:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002064:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002068:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002074:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <HAL_RCC_OscConfig+0x330>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800207c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002080:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002084:	fa92 f2a2 	rbit	r2, r2
 8002088:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800208c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ab      	bne.n	8002004 <HAL_RCC_OscConfig+0x284>
 80020ac:	e003      	b.n	80020b6 <HAL_RCC_OscConfig+0x336>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 817d 	beq.w	80023c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020cc:	4ba6      	ldr	r3, [pc, #664]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020d8:	4ba3      	ldr	r3, [pc, #652]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d172      	bne.n	80021ca <HAL_RCC_OscConfig+0x44a>
 80020e4:	4ba0      	ldr	r3, [pc, #640]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d16c      	bne.n	80021ca <HAL_RCC_OscConfig+0x44a>
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002102:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <HAL_RCC_OscConfig+0x3a0>
 800211a:	4b93      	ldr	r3, [pc, #588]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e013      	b.n	8002148 <HAL_RCC_OscConfig+0x3c8>
 8002120:	2302      	movs	r3, #2
 8002122:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002138:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002144:	4b88      	ldr	r3, [pc, #544]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	2202      	movs	r2, #2
 800214a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800214e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002152:	fa92 f2a2 	rbit	r2, r2
 8002156:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800215a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800215e:	fab2 f282 	clz	r2, r2
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	f042 0220 	orr.w	r2, r2, #32
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	f002 021f 	and.w	r2, r2, #31
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCC_OscConfig+0x410>
 800217a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d002      	beq.n	8002190 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	f000 be2e 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b75      	ldr	r3, [pc, #468]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	21f8      	movs	r1, #248	@ 0xf8
 80021a6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80021ae:	fa91 f1a1 	rbit	r1, r1
 80021b2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80021b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80021ba:	fab1 f181 	clz	r1, r1
 80021be:	b2c9      	uxtb	r1, r1
 80021c0:	408b      	lsls	r3, r1
 80021c2:	4969      	ldr	r1, [pc, #420]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c8:	e0fd      	b.n	80023c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8088 	beq.w	80022ec <HAL_RCC_OscConfig+0x56c>
 80021dc:	2301      	movs	r3, #1
 80021de:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80021ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	461a      	mov	r2, r3
 8002204:	2301      	movs	r3, #1
 8002206:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fd84 	bl	8000d14 <HAL_GetTick>
 800220c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002212:	f7fe fd7f 	bl	8000d14 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d902      	bls.n	8002228 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	f000 bde2 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>
 8002228:	2302      	movs	r3, #2
 800222a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800223a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_RCC_OscConfig+0x4d8>
 8002252:	4b45      	ldr	r3, [pc, #276]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e013      	b.n	8002280 <HAL_RCC_OscConfig+0x500>
 8002258:	2302      	movs	r3, #2
 800225a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002270:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800227c:	4b3a      	ldr	r3, [pc, #232]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	2202      	movs	r2, #2
 8002282:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002286:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800228a:	fa92 f2a2 	rbit	r2, r2
 800228e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002292:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002296:	fab2 f282 	clz	r2, r2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f042 0220 	orr.w	r2, r2, #32
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f002 021f 	and.w	r2, r2, #31
 80022a6:	2101      	movs	r1, #1
 80022a8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0af      	beq.n	8002212 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	21f8      	movs	r1, #248	@ 0xf8
 80022c8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80022d0:	fa91 f1a1 	rbit	r1, r1
 80022d4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80022d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80022dc:	fab1 f181 	clz	r1, r1
 80022e0:	b2c9      	uxtb	r1, r1
 80022e2:	408b      	lsls	r3, r1
 80022e4:	4920      	ldr	r1, [pc, #128]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
 80022ea:	e06c      	b.n	80023c6 <HAL_RCC_OscConfig+0x646>
 80022ec:	2301      	movs	r3, #1
 80022ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80022fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800230c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	461a      	mov	r2, r3
 8002314:	2300      	movs	r3, #0
 8002316:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fcfc 	bl	8000d14 <HAL_GetTick>
 800231c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002322:	f7fe fcf7 	bl	8000d14 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d902      	bls.n	8002338 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	f000 bd5a 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>
 8002338:	2302      	movs	r3, #2
 800233a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800234a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d104      	bne.n	800236c <HAL_RCC_OscConfig+0x5ec>
 8002362:	4b01      	ldr	r3, [pc, #4]	@ (8002368 <HAL_RCC_OscConfig+0x5e8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	e015      	b.n	8002394 <HAL_RCC_OscConfig+0x614>
 8002368:	40021000 	.word	0x40021000
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800237e:	2302      	movs	r3, #2
 8002380:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002384:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002390:	4bc8      	ldr	r3, [pc, #800]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	2202      	movs	r2, #2
 8002396:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800239a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800239e:	fa92 f2a2 	rbit	r2, r2
 80023a2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80023a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f042 0220 	orr.w	r2, r2, #32
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f002 021f 	and.w	r2, r2, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f202 	lsl.w	r2, r1, r2
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1ad      	bne.n	8002322 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8110 	beq.w	80025fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d079      	beq.n	80024e0 <HAL_RCC_OscConfig+0x760>
 80023ec:	2301      	movs	r3, #1
 80023ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80023fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	4bab      	ldr	r3, [pc, #684]	@ (80026b8 <HAL_RCC_OscConfig+0x938>)
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	461a      	mov	r2, r3
 8002412:	2301      	movs	r3, #1
 8002414:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7fe fc7d 	bl	8000d14 <HAL_GetTick>
 800241a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fc78 	bl	8000d14 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d902      	bls.n	8002436 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	f000 bcdb 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002458:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002474:	2202      	movs	r2, #2
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800248e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002490:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 8002492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002498:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800249c:	2102      	movs	r1, #2
 800249e:	6019      	str	r1, [r3, #0]
 80024a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f1a3 	rbit	r1, r3
 80024ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024b6:	6019      	str	r1, [r3, #0]
  return result;
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0a0      	beq.n	8002420 <HAL_RCC_OscConfig+0x6a0>
 80024de:	e08d      	b.n	80025fc <HAL_RCC_OscConfig+0x87c>
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002502:	601a      	str	r2, [r3, #0]
  return result;
 8002504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002508:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800250c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	4b68      	ldr	r3, [pc, #416]	@ (80026b8 <HAL_RCC_OscConfig+0x938>)
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	461a      	mov	r2, r3
 800251e:	2300      	movs	r3, #0
 8002520:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe fbf7 	bl	8000d14 <HAL_GetTick>
 8002526:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fbf2 	bl	8000d14 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d902      	bls.n	8002542 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	f000 bc55 	b.w	8002dec <HAL_RCC_OscConfig+0x106c>
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800254a:	2202      	movs	r2, #2
 800254c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fa93 f2a3 	rbit	r2, r3
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800256e:	2202      	movs	r2, #2
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002584:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002592:	2202      	movs	r2, #2
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fa93 f2a3 	rbit	r2, r3
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ae:	4b41      	ldr	r3, [pc, #260]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 80025b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025ba:	2102      	movs	r1, #2
 80025bc:	6019      	str	r1, [r3, #0]
 80025be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f1a3 	rbit	r1, r3
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025d4:	6019      	str	r1, [r3, #0]
  return result;
 80025d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d197      	bne.n	800252c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 81a1 	beq.w	8002954 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002618:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d116      	bne.n	8002652 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262e:	61d3      	str	r3, [r2, #28]
 8002630:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002646:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800264a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800264c:	2301      	movs	r3, #1
 800264e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_RCC_OscConfig+0x93c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11a      	bne.n	8002694 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <HAL_RCC_OscConfig+0x93c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a16      	ldr	r2, [pc, #88]	@ (80026bc <HAL_RCC_OscConfig+0x93c>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fb53 	bl	8000d14 <HAL_GetTick>
 800266e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	e009      	b.n	8002688 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002674:	f7fe fb4e 	bl	8000d14 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	@ 0x64
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e3b1      	b.n	8002dec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_RCC_OscConfig+0x93c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ef      	beq.n	8002674 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d10d      	bne.n	80026c0 <HAL_RCC_OscConfig+0x940>
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a02      	ldr	r2, [pc, #8]	@ (80026b4 <HAL_RCC_OscConfig+0x934>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	e03c      	b.n	800272c <HAL_RCC_OscConfig+0x9ac>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	10908120 	.word	0x10908120
 80026bc:	40007000 	.word	0x40007000
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x96a>
 80026d0:	4bc1      	ldr	r3, [pc, #772]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4ac0      	ldr	r2, [pc, #768]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	6213      	str	r3, [r2, #32]
 80026dc:	4bbe      	ldr	r3, [pc, #760]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4abd      	ldr	r2, [pc, #756]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80026e2:	f023 0304 	bic.w	r3, r3, #4
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	e020      	b.n	800272c <HAL_RCC_OscConfig+0x9ac>
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x994>
 80026fa:	4bb7      	ldr	r3, [pc, #732]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4ab6      	ldr	r2, [pc, #728]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	4bb4      	ldr	r3, [pc, #720]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4ab3      	ldr	r2, [pc, #716]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0x9ac>
 8002714:	4bb0      	ldr	r3, [pc, #704]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4aaf      	ldr	r2, [pc, #700]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	4bad      	ldr	r3, [pc, #692]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4aac      	ldr	r2, [pc, #688]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8081 	beq.w	8002840 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fe fae9 	bl	8000d14 <HAL_GetTick>
 8002742:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe fae4 	bl	8000d14 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e345      	b.n	8002dec <HAL_RCC_OscConfig+0x106c>
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002768:	2202      	movs	r2, #2
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800278c:	2202      	movs	r2, #2
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027a6:	601a      	str	r2, [r3, #0]
  return result;
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0xa4c>
 80027c6:	4b84      	ldr	r3, [pc, #528]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	e013      	b.n	80027f4 <HAL_RCC_OscConfig+0xa74>
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027d4:	2202      	movs	r2, #2
 80027d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	4b79      	ldr	r3, [pc, #484]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80027fc:	2102      	movs	r1, #2
 80027fe:	6011      	str	r1, [r2, #0]
 8002800:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002804:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	fa92 f1a2 	rbit	r1, r2
 800280e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002812:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002816:	6011      	str	r1, [r2, #0]
  return result;
 8002818:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800281c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d084      	beq.n	8002748 <HAL_RCC_OscConfig+0x9c8>
 800283e:	e07f      	b.n	8002940 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002840:	f7fe fa68 	bl	8000d14 <HAL_GetTick>
 8002844:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	e00b      	b.n	8002862 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe fa63 	bl	8000d14 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e2c4      	b.n	8002dec <HAL_RCC_OscConfig+0x106c>
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800286a:	2202      	movs	r2, #2
 800286c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002880:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800288e:	2202      	movs	r2, #2
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fa93 f2a3 	rbit	r2, r3
 80028a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028a8:	601a      	str	r2, [r3, #0]
  return result;
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d102      	bne.n	80028ce <HAL_RCC_OscConfig+0xb4e>
 80028c8:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	e013      	b.n	80028f6 <HAL_RCC_OscConfig+0xb76>
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028fa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80028fe:	2102      	movs	r1, #2
 8002900:	6011      	str	r1, [r2, #0]
 8002902:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002906:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fa92 f1a2 	rbit	r1, r2
 8002910:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002914:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002918:	6011      	str	r1, [r2, #0]
  return result;
 800291a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800291e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f002 021f 	and.w	r2, r2, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f202 	lsl.w	r2, r1, r2
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d184      	bne.n	800284a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002940:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002948:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4a22      	ldr	r2, [pc, #136]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 800294e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002952:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8242 	beq.w	8002dea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002966:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <HAL_RCC_OscConfig+0xc58>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	f000 8213 	beq.w	8002d9a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b02      	cmp	r3, #2
 8002982:	f040 8162 	bne.w	8002c4a <HAL_RCC_OscConfig+0xeca>
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800298e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029aa:	601a      	str	r2, [r3, #0]
  return result;
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	461a      	mov	r2, r3
 80029c8:	2300      	movs	r3, #0
 80029ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe f9a2 	bl	8000d14 <HAL_GetTick>
 80029d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	e00c      	b.n	80029f0 <HAL_RCC_OscConfig+0xc70>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe f99a 	bl	8000d14 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1fd      	b.n	8002dec <HAL_RCC_OscConfig+0x106c>
 80029f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a02:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f2a3 	rbit	r2, r3
 8002a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a10:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a14:	601a      	str	r2, [r3, #0]
  return result;
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_RCC_OscConfig+0xcba>
 8002a34:	4bb0      	ldr	r3, [pc, #704]	@ (8002cf8 <HAL_RCC_OscConfig+0xf78>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	e027      	b.n	8002a8a <HAL_RCC_OscConfig+0xd0a>
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	4b9c      	ldr	r3, [pc, #624]	@ (8002cf8 <HAL_RCC_OscConfig+0xf78>)
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a8e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a92:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a96:	6011      	str	r1, [r2, #0]
 8002a98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a9c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	fa92 f1a2 	rbit	r1, r2
 8002aa6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aaa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002aae:	6011      	str	r1, [r2, #0]
  return result;
 8002ab0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ab4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	fab2 f282 	clz	r2, r2
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	f042 0220 	orr.w	r2, r2, #32
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	f002 021f 	and.w	r2, r2, #31
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d182      	bne.n	80029dc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad6:	4b88      	ldr	r3, [pc, #544]	@ (8002cf8 <HAL_RCC_OscConfig+0xf78>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	430b      	orrs	r3, r1
 8002af8:	497f      	ldr	r1, [pc, #508]	@ (8002cf8 <HAL_RCC_OscConfig+0xf78>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
 8002afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b02:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b10:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b22:	601a      	str	r2, [r3, #0]
  return result;
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2301      	movs	r3, #1
 8002b42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe f8e6 	bl	8000d14 <HAL_GetTick>
 8002b48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b4c:	e009      	b.n	8002b62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fe f8e1 	bl	8000d14 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e144      	b.n	8002dec <HAL_RCC_OscConfig+0x106c>
 8002b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b66:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b74:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b82:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b86:	601a      	str	r2, [r3, #0]
  return result;
 8002b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d102      	bne.n	8002bac <HAL_RCC_OscConfig+0xe2c>
 8002ba6:	4b54      	ldr	r3, [pc, #336]	@ (8002cf8 <HAL_RCC_OscConfig+0xf78>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	e027      	b.n	8002bfc <HAL_RCC_OscConfig+0xe7c>
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	fa93 f2a3 	rbit	r2, r3
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002bda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <HAL_RCC_OscConfig+0xf78>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c00:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c04:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c08:	6011      	str	r1, [r2, #0]
 8002c0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c0e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	fa92 f1a2 	rbit	r1, r2
 8002c18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c1c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c20:	6011      	str	r1, [r2, #0]
  return result;
 8002c22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c26:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f042 0220 	orr.w	r2, r2, #32
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f002 021f 	and.w	r2, r2, #31
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d082      	beq.n	8002b4e <HAL_RCC_OscConfig+0xdce>
 8002c48:	e0cf      	b.n	8002dea <HAL_RCC_OscConfig+0x106a>
 8002c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c6e:	601a      	str	r2, [r3, #0]
  return result;
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c84:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe f840 	bl	8000d14 <HAL_GetTick>
 8002c94:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c98:	e009      	b.n	8002cae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe f83b 	bl	8000d14 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e09e      	b.n	8002dec <HAL_RCC_OscConfig+0x106c>
 8002cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002cb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	fa93 f2a3 	rbit	r2, r3
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002cd2:	601a      	str	r2, [r3, #0]
  return result;
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002cdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d104      	bne.n	8002cfc <HAL_RCC_OscConfig+0xf7c>
 8002cf2:	4b01      	ldr	r3, [pc, #4]	@ (8002cf8 <HAL_RCC_OscConfig+0xf78>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	e029      	b.n	8002d4c <HAL_RCC_OscConfig+0xfcc>
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d26:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d34:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d42:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	4b2b      	ldr	r3, [pc, #172]	@ (8002df8 <HAL_RCC_OscConfig+0x1078>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d50:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002d54:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d58:	6011      	str	r1, [r2, #0]
 8002d5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d5e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	fa92 f1a2 	rbit	r1, r2
 8002d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d6c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d70:	6011      	str	r1, [r2, #0]
  return result;
 8002d72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d76:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	fab2 f282 	clz	r2, r2
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f042 0220 	orr.w	r2, r2, #32
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f002 021f 	and.w	r2, r2, #31
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d180      	bne.n	8002c9a <HAL_RCC_OscConfig+0xf1a>
 8002d98:	e027      	b.n	8002dea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e01e      	b.n	8002dec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dae:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <HAL_RCC_OscConfig+0x1078>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002db6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002dba:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002dd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b09e      	sub	sp, #120	@ 0x78
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e162      	b.n	80030da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b90      	ldr	r3, [pc, #576]	@ (8003058 <HAL_RCC_ClockConfig+0x25c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d910      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b8d      	ldr	r3, [pc, #564]	@ (8003058 <HAL_RCC_ClockConfig+0x25c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 0207 	bic.w	r2, r3, #7
 8002e2a:	498b      	ldr	r1, [pc, #556]	@ (8003058 <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b89      	ldr	r3, [pc, #548]	@ (8003058 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e14a      	b.n	80030da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b82      	ldr	r3, [pc, #520]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	497f      	ldr	r1, [pc, #508]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80dc 	beq.w	8003028 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d13c      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xf6>
 8002e78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e7c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xa6>
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	e00f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0xc6>
 8002ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	667b      	str	r3, [r7, #100]	@ 0x64
 8002eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ebe:	4b67      	ldr	r3, [pc, #412]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ec6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ec8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002eca:	fa92 f2a2 	rbit	r2, r2
 8002ece:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ed0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ed2:	fab2 f282 	clz	r2, r2
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f042 0220 	orr.w	r2, r2, #32
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f002 021f 	and.w	r2, r2, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d17b      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0f3      	b.n	80030da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d13c      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x178>
 8002efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002efe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d102      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x128>
 8002f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	e00f      	b.n	8002f44 <HAL_RCC_ClockConfig+0x148>
 8002f24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f40:	4b46      	ldr	r3, [pc, #280]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f48:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f4c:	fa92 f2a2 	rbit	r2, r2
 8002f50:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002f52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f54:	fab2 f282 	clz	r2, r2
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	f042 0220 	orr.w	r2, r2, #32
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	f002 021f 	and.w	r2, r2, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d13a      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b2      	b.n	80030da <HAL_RCC_ClockConfig+0x2de>
 8002f74:	2302      	movs	r3, #2
 8002f76:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d102      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1a0>
 8002f96:	4b31      	ldr	r3, [pc, #196]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	e00d      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1bc>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa8:	2302      	movs	r3, #2
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	4b29      	ldr	r3, [pc, #164]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	2202      	movs	r2, #2
 8002fba:	61ba      	str	r2, [r7, #24]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	fa92 f2a2 	rbit	r2, r2
 8002fc2:	617a      	str	r2, [r7, #20]
  return result;
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	fab2 f282 	clz	r2, r2
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f042 0220 	orr.w	r2, r2, #32
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	f002 021f 	and.w	r2, r2, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e079      	b.n	80030da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	491a      	ldr	r1, [pc, #104]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fd fe8c 	bl	8000d14 <HAL_GetTick>
 8002ffc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fd fe88 	bl	8000d14 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e061      	b.n	80030da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_RCC_ClockConfig+0x260>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 020c 	and.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1eb      	bne.n	8003000 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_RCC_ClockConfig+0x25c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d214      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <HAL_RCC_ClockConfig+0x25c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 0207 	bic.w	r2, r3, #7
 800303e:	4906      	ldr	r1, [pc, #24]	@ (8003058 <HAL_RCC_ClockConfig+0x25c>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <HAL_RCC_ClockConfig+0x25c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e040      	b.n	80030da <HAL_RCC_ClockConfig+0x2de>
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b1d      	ldr	r3, [pc, #116]	@ (80030e4 <HAL_RCC_ClockConfig+0x2e8>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	491a      	ldr	r1, [pc, #104]	@ (80030e4 <HAL_RCC_ClockConfig+0x2e8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b16      	ldr	r3, [pc, #88]	@ (80030e4 <HAL_RCC_ClockConfig+0x2e8>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4912      	ldr	r1, [pc, #72]	@ (80030e4 <HAL_RCC_ClockConfig+0x2e8>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800309e:	f000 f829 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <HAL_RCC_ClockConfig+0x2e8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ac:	22f0      	movs	r2, #240	@ 0xf0
 80030ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	fa92 f2a2 	rbit	r2, r2
 80030b6:	60fa      	str	r2, [r7, #12]
  return result;
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	fab2 f282 	clz	r2, r2
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	40d3      	lsrs	r3, r2
 80030c2:	4a09      	ldr	r2, [pc, #36]	@ (80030e8 <HAL_RCC_ClockConfig+0x2ec>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ca:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <HAL_RCC_ClockConfig+0x2f0>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030ce:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <HAL_RCC_ClockConfig+0x2f4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fdda 	bl	8000c8c <HAL_InitTick>
  
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3778      	adds	r7, #120	@ 0x78
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	08004d28 	.word	0x08004d28
 80030ec:	20000000 	.word	0x20000000
 80030f0:	20000004 	.word	0x20000004

080030f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800310e:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x94>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b04      	cmp	r3, #4
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x30>
 800311e:	2b08      	cmp	r3, #8
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x36>
 8003122:	e026      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_RCC_GetSysClockFreq+0x98>)
 8003126:	613b      	str	r3, [r7, #16]
      break;
 8003128:	e026      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	0c9b      	lsrs	r3, r3, #18
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003134:	5cd3      	ldrb	r3, [r2, r3]
 8003136:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003138:	4b13      	ldr	r3, [pc, #76]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x94>)
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	4a14      	ldr	r2, [pc, #80]	@ (8003194 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003150:	4a0e      	ldr	r2, [pc, #56]	@ (800318c <HAL_RCC_GetSysClockFreq+0x98>)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	fbb2 f2f3 	udiv	r2, r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e004      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a0c      	ldr	r2, [pc, #48]	@ (8003198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
      break;
 8003170:	e002      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_RCC_GetSysClockFreq+0x98>)
 8003174:	613b      	str	r3, [r7, #16]
      break;
 8003176:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003178:	693b      	ldr	r3, [r7, #16]
}
 800317a:	4618      	mov	r0, r3
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	007a1200 	.word	0x007a1200
 8003190:	08004d40 	.word	0x08004d40
 8003194:	08004d50 	.word	0x08004d50
 8003198:	003d0900 	.word	0x003d0900

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031ba:	f7ff ffef 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031be:	4601      	mov	r1, r0
 80031c0:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031c8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	fa92 f2a2 	rbit	r2, r2
 80031d4:	603a      	str	r2, [r7, #0]
  return result;
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	fab2 f282 	clz	r2, r2
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	40d3      	lsrs	r3, r2
 80031e0:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	08004d38 	.word	0x08004d38

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031fe:	f7ff ffcd 	bl	800319c <HAL_RCC_GetHCLKFreq>
 8003202:	4601      	mov	r1, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800320c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003210:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	fa92 f2a2 	rbit	r2, r2
 8003218:	603a      	str	r2, [r7, #0]
  return result;
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	fab2 f282 	clz	r2, r2
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	40d3      	lsrs	r3, r2
 8003224:	4a04      	ldr	r2, [pc, #16]	@ (8003238 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	08004d38 	.word	0x08004d38

0800323c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b092      	sub	sp, #72	@ 0x48
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80cd 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003260:	4b8e      	ldr	r3, [pc, #568]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10e      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326c:	4b8b      	ldr	r3, [pc, #556]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4a8a      	ldr	r2, [pc, #552]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003276:	61d3      	str	r3, [r2, #28]
 8003278:	4b88      	ldr	r3, [pc, #544]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b85      	ldr	r3, [pc, #532]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b82      	ldr	r3, [pc, #520]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a81      	ldr	r2, [pc, #516]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fd37 	bl	8000d14 <HAL_GetTick>
 80032a6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fd fd33 	bl	8000d14 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	@ 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0ea      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b78      	ldr	r3, [pc, #480]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c8:	4b74      	ldr	r3, [pc, #464]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d07d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d076      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e6:	4b6d      	ldr	r3, [pc, #436]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032f4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	4b66      	ldr	r3, [pc, #408]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	461a      	mov	r2, r3
 8003310:	2301      	movs	r3, #1
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003318:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	4b5d      	ldr	r3, [pc, #372]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	461a      	mov	r2, r3
 8003334:	2300      	movs	r3, #0
 8003336:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003338:	4a58      	ldr	r2, [pc, #352]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800333e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d045      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fd fce4 	bl	8000d14 <HAL_GetTick>
 800334c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fd fce0 	bl	8000d14 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e095      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003366:	2302      	movs	r3, #2
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
 8003372:	2302      	movs	r3, #2
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	61fb      	str	r3, [r7, #28]
  return result;
 800337e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d102      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003394:	4b41      	ldr	r3, [pc, #260]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	e007      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800339a:	2302      	movs	r3, #2
 800339c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	4b3d      	ldr	r3, [pc, #244]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	2202      	movs	r2, #2
 80033ac:	613a      	str	r2, [r7, #16]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	fa92 f2a2 	rbit	r2, r2
 80033b4:	60fa      	str	r2, [r7, #12]
  return result;
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	fab2 f282 	clz	r2, r2
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f002 021f 	and.w	r2, r2, #31
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0bd      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033d4:	4b31      	ldr	r3, [pc, #196]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	492e      	ldr	r1, [pc, #184]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b2b      	ldr	r3, [pc, #172]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4a2a      	ldr	r2, [pc, #168]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003406:	4b25      	ldr	r3, [pc, #148]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4922      	ldr	r1, [pc, #136]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	4313      	orrs	r3, r2
 8003416:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003424:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	f023 0210 	bic.w	r2, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	491a      	ldr	r1, [pc, #104]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	4313      	orrs	r3, r2
 8003434:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003442:	4b16      	ldr	r3, [pc, #88]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4913      	ldr	r1, [pc, #76]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003450:	4313      	orrs	r3, r2
 8003452:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003460:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	490b      	ldr	r1, [pc, #44]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	4313      	orrs	r3, r2
 8003470:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800347e:	4b07      	ldr	r3, [pc, #28]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	4904      	ldr	r1, [pc, #16]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348c:	4313      	orrs	r3, r2
 800348e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3748      	adds	r7, #72	@ 0x48
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	40007000 	.word	0x40007000
 80034a4:	10908100 	.word	0x10908100

080034a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e049      	b.n	800354e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fa6c 	bl	80009ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 fb60 	bl	8003bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e049      	b.n	80035fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f841 	bl	8003604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f000 fb09 	bl	8003bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_TIM_PWM_Start+0x24>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e03c      	b.n	80036b6 <HAL_TIM_PWM_Start+0x9e>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b04      	cmp	r3, #4
 8003640:	d109      	bne.n	8003656 <HAL_TIM_PWM_Start+0x3e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	bf14      	ite	ne
 800364e:	2301      	movne	r3, #1
 8003650:	2300      	moveq	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	e02f      	b.n	80036b6 <HAL_TIM_PWM_Start+0x9e>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d109      	bne.n	8003670 <HAL_TIM_PWM_Start+0x58>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	e022      	b.n	80036b6 <HAL_TIM_PWM_Start+0x9e>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b0c      	cmp	r3, #12
 8003674:	d109      	bne.n	800368a <HAL_TIM_PWM_Start+0x72>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	e015      	b.n	80036b6 <HAL_TIM_PWM_Start+0x9e>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b10      	cmp	r3, #16
 800368e:	d109      	bne.n	80036a4 <HAL_TIM_PWM_Start+0x8c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e008      	b.n	80036b6 <HAL_TIM_PWM_Start+0x9e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e088      	b.n	80037d0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0xb6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036cc:	e023      	b.n	8003716 <HAL_TIM_PWM_Start+0xfe>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xc6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036dc:	e01b      	b.n	8003716 <HAL_TIM_PWM_Start+0xfe>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0xd6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ec:	e013      	b.n	8003716 <HAL_TIM_PWM_Start+0xfe>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b0c      	cmp	r3, #12
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0xe6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036fc:	e00b      	b.n	8003716 <HAL_TIM_PWM_Start+0xfe>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b10      	cmp	r3, #16
 8003702:	d104      	bne.n	800370e <HAL_TIM_PWM_Start+0xf6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800370c:	e003      	b.n	8003716 <HAL_TIM_PWM_Start+0xfe>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fe08 	bl	8004334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2b      	ldr	r2, [pc, #172]	@ (80037d8 <HAL_TIM_PWM_Start+0x1c0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_PWM_Start+0x134>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2a      	ldr	r2, [pc, #168]	@ (80037dc <HAL_TIM_PWM_Start+0x1c4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_TIM_PWM_Start+0x134>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a28      	ldr	r2, [pc, #160]	@ (80037e0 <HAL_TIM_PWM_Start+0x1c8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_PWM_Start+0x134>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a27      	ldr	r2, [pc, #156]	@ (80037e4 <HAL_TIM_PWM_Start+0x1cc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_TIM_PWM_Start+0x138>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_TIM_PWM_Start+0x13a>
 8003750:	2300      	movs	r3, #0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003764:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1b      	ldr	r2, [pc, #108]	@ (80037d8 <HAL_TIM_PWM_Start+0x1c0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_TIM_PWM_Start+0x176>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003778:	d009      	beq.n	800378e <HAL_TIM_PWM_Start+0x176>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1a      	ldr	r2, [pc, #104]	@ (80037e8 <HAL_TIM_PWM_Start+0x1d0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_TIM_PWM_Start+0x176>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a14      	ldr	r2, [pc, #80]	@ (80037dc <HAL_TIM_PWM_Start+0x1c4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d115      	bne.n	80037ba <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	4b15      	ldr	r3, [pc, #84]	@ (80037ec <HAL_TIM_PWM_Start+0x1d4>)
 8003796:	4013      	ands	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b06      	cmp	r3, #6
 800379e:	d015      	beq.n	80037cc <HAL_TIM_PWM_Start+0x1b4>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a6:	d011      	beq.n	80037cc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b8:	e008      	b.n	80037cc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e000      	b.n	80037ce <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800
 80037e8:	40000400 	.word	0x40000400
 80037ec:	00010007 	.word	0x00010007

080037f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e0ff      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b14      	cmp	r3, #20
 800381a:	f200 80f0 	bhi.w	80039fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800381e:	a201      	add	r2, pc, #4	@ (adr r2, 8003824 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003879 	.word	0x08003879
 8003828:	080039ff 	.word	0x080039ff
 800382c:	080039ff 	.word	0x080039ff
 8003830:	080039ff 	.word	0x080039ff
 8003834:	080038b9 	.word	0x080038b9
 8003838:	080039ff 	.word	0x080039ff
 800383c:	080039ff 	.word	0x080039ff
 8003840:	080039ff 	.word	0x080039ff
 8003844:	080038fb 	.word	0x080038fb
 8003848:	080039ff 	.word	0x080039ff
 800384c:	080039ff 	.word	0x080039ff
 8003850:	080039ff 	.word	0x080039ff
 8003854:	0800393b 	.word	0x0800393b
 8003858:	080039ff 	.word	0x080039ff
 800385c:	080039ff 	.word	0x080039ff
 8003860:	080039ff 	.word	0x080039ff
 8003864:	0800397d 	.word	0x0800397d
 8003868:	080039ff 	.word	0x080039ff
 800386c:	080039ff 	.word	0x080039ff
 8003870:	080039ff 	.word	0x080039ff
 8003874:	080039bd 	.word	0x080039bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fa18 	bl	8003cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
      break;
 80038b6:	e0a5      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fa7e 	bl	8003dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6999      	ldr	r1, [r3, #24]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	619a      	str	r2, [r3, #24]
      break;
 80038f8:	e084      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fadd 	bl	8003ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0208 	orr.w	r2, r2, #8
 8003914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0204 	bic.w	r2, r2, #4
 8003924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69d9      	ldr	r1, [r3, #28]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	61da      	str	r2, [r3, #28]
      break;
 8003938:	e064      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fb3b 	bl	8003fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69d9      	ldr	r1, [r3, #28]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	021a      	lsls	r2, r3, #8
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	61da      	str	r2, [r3, #28]
      break;
 800397a:	e043      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fb7e 	bl	8004084 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039ba:	e023      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fbbc 	bl	8004140 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039fc:	e002      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
      break;
 8003a02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x1c>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0b6      	b.n	8003ba2 <HAL_TIM_ConfigClockSource+0x18a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a70:	d03e      	beq.n	8003af0 <HAL_TIM_ConfigClockSource+0xd8>
 8003a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a76:	f200 8087 	bhi.w	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a7e:	f000 8086 	beq.w	8003b8e <HAL_TIM_ConfigClockSource+0x176>
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a86:	d87f      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003a88:	2b70      	cmp	r3, #112	@ 0x70
 8003a8a:	d01a      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0xaa>
 8003a8c:	2b70      	cmp	r3, #112	@ 0x70
 8003a8e:	d87b      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003a90:	2b60      	cmp	r3, #96	@ 0x60
 8003a92:	d050      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x11e>
 8003a94:	2b60      	cmp	r3, #96	@ 0x60
 8003a96:	d877      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003a98:	2b50      	cmp	r3, #80	@ 0x50
 8003a9a:	d03c      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xfe>
 8003a9c:	2b50      	cmp	r3, #80	@ 0x50
 8003a9e:	d873      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003aa0:	2b40      	cmp	r3, #64	@ 0x40
 8003aa2:	d058      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x13e>
 8003aa4:	2b40      	cmp	r3, #64	@ 0x40
 8003aa6:	d86f      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003aa8:	2b30      	cmp	r3, #48	@ 0x30
 8003aaa:	d064      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x15e>
 8003aac:	2b30      	cmp	r3, #48	@ 0x30
 8003aae:	d86b      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d060      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x15e>
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d867      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d05c      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x15e>
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d05a      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x15e>
 8003ac0:	e062      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ad2:	f000 fc0f 	bl	80042f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	609a      	str	r2, [r3, #8]
      break;
 8003aee:	e04f      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b00:	f000 fbf8 	bl	80042f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b12:	609a      	str	r2, [r3, #8]
      break;
 8003b14:	e03c      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b22:	461a      	mov	r2, r3
 8003b24:	f000 fb6c 	bl	8004200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2150      	movs	r1, #80	@ 0x50
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fbc5 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 8003b34:	e02c      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b42:	461a      	mov	r2, r3
 8003b44:	f000 fb8b 	bl	800425e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2160      	movs	r1, #96	@ 0x60
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fbb5 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 8003b54:	e01c      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	461a      	mov	r2, r3
 8003b64:	f000 fb4c 	bl	8004200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2140      	movs	r1, #64	@ 0x40
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fba5 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 8003b74:	e00c      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f000 fb9c 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 8003b86:	e003      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b8c:	e000      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a38      	ldr	r2, [pc, #224]	@ (8003ca0 <TIM_Base_SetConfig+0xf4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_Base_SetConfig+0x28>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0x28>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a35      	ldr	r2, [pc, #212]	@ (8003ca4 <TIM_Base_SetConfig+0xf8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <TIM_Base_SetConfig+0xf4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <TIM_Base_SetConfig+0x6a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf4:	d00f      	beq.n	8003c16 <TIM_Base_SetConfig+0x6a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca4 <TIM_Base_SetConfig+0xf8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <TIM_Base_SetConfig+0x6a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a29      	ldr	r2, [pc, #164]	@ (8003ca8 <TIM_Base_SetConfig+0xfc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <TIM_Base_SetConfig+0x6a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a28      	ldr	r2, [pc, #160]	@ (8003cac <TIM_Base_SetConfig+0x100>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_Base_SetConfig+0x6a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a27      	ldr	r2, [pc, #156]	@ (8003cb0 <TIM_Base_SetConfig+0x104>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d108      	bne.n	8003c28 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a14      	ldr	r2, [pc, #80]	@ (8003ca0 <TIM_Base_SetConfig+0xf4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0xc0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <TIM_Base_SetConfig+0xfc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0xc0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a13      	ldr	r2, [pc, #76]	@ (8003cac <TIM_Base_SetConfig+0x100>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0xc0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a12      	ldr	r2, [pc, #72]	@ (8003cb0 <TIM_Base_SetConfig+0x104>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d105      	bne.n	8003c92 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f023 0201 	bic.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	611a      	str	r2, [r3, #16]
  }
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40014400 	.word	0x40014400
 8003cb0:	40014800 	.word	0x40014800

08003cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f023 0201 	bic.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0302 	bic.w	r3, r3, #2
 8003d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a28      	ldr	r2, [pc, #160]	@ (8003db0 <TIM_OC1_SetConfig+0xfc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00b      	beq.n	8003d2c <TIM_OC1_SetConfig+0x78>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <TIM_OC1_SetConfig+0x100>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <TIM_OC1_SetConfig+0x78>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a26      	ldr	r2, [pc, #152]	@ (8003db8 <TIM_OC1_SetConfig+0x104>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC1_SetConfig+0x78>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a25      	ldr	r2, [pc, #148]	@ (8003dbc <TIM_OC1_SetConfig+0x108>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10c      	bne.n	8003d46 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0308 	bic.w	r3, r3, #8
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 0304 	bic.w	r3, r3, #4
 8003d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <TIM_OC1_SetConfig+0xfc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <TIM_OC1_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a18      	ldr	r2, [pc, #96]	@ (8003db4 <TIM_OC1_SetConfig+0x100>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <TIM_OC1_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <TIM_OC1_SetConfig+0x104>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_OC1_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <TIM_OC1_SetConfig+0x108>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d111      	bne.n	8003d8a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	621a      	str	r2, [r3, #32]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40014400 	.word	0x40014400
 8003dbc:	40014800 	.word	0x40014800

08003dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f023 0210 	bic.w	r2, r3, #16
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0320 	bic.w	r3, r3, #32
 8003e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a24      	ldr	r2, [pc, #144]	@ (8003eb0 <TIM_OC2_SetConfig+0xf0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10d      	bne.n	8003e40 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb0 <TIM_OC2_SetConfig+0xf0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_OC2_SetConfig+0xa0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb4 <TIM_OC2_SetConfig+0xf4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_OC2_SetConfig+0xa0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a19      	ldr	r2, [pc, #100]	@ (8003eb8 <TIM_OC2_SetConfig+0xf8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_OC2_SetConfig+0xa0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <TIM_OC2_SetConfig+0xfc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d113      	bne.n	8003e88 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e66:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e6e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800

08003ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	@ (8003fac <TIM_OC3_SetConfig+0xec>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10d      	bne.n	8003f3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f3c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1a      	ldr	r2, [pc, #104]	@ (8003fac <TIM_OC3_SetConfig+0xec>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_OC3_SetConfig+0x9e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a19      	ldr	r2, [pc, #100]	@ (8003fb0 <TIM_OC3_SetConfig+0xf0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_OC3_SetConfig+0x9e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <TIM_OC3_SetConfig+0xf4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_OC3_SetConfig+0x9e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <TIM_OC3_SetConfig+0xf8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d113      	bne.n	8003f86 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40014400 	.word	0x40014400
 8003fb8:	40014800 	.word	0x40014800

08003fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800400a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	031b      	lsls	r3, r3, #12
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a16      	ldr	r2, [pc, #88]	@ (8004074 <TIM_OC4_SetConfig+0xb8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_OC4_SetConfig+0x7c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a15      	ldr	r2, [pc, #84]	@ (8004078 <TIM_OC4_SetConfig+0xbc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_OC4_SetConfig+0x7c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a14      	ldr	r2, [pc, #80]	@ (800407c <TIM_OC4_SetConfig+0xc0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_OC4_SetConfig+0x7c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a13      	ldr	r2, [pc, #76]	@ (8004080 <TIM_OC4_SetConfig+0xc4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d109      	bne.n	800404c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800403e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	019b      	lsls	r3, r3, #6
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800

08004084 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80040c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	@ (8004130 <TIM_OC5_SetConfig+0xac>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00b      	beq.n	80040f6 <TIM_OC5_SetConfig+0x72>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	@ (8004134 <TIM_OC5_SetConfig+0xb0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <TIM_OC5_SetConfig+0x72>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a13      	ldr	r2, [pc, #76]	@ (8004138 <TIM_OC5_SetConfig+0xb4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_OC5_SetConfig+0x72>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a12      	ldr	r2, [pc, #72]	@ (800413c <TIM_OC5_SetConfig+0xb8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d109      	bne.n	800410a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400
 800413c:	40014800 	.word	0x40014800

08004140 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	051b      	lsls	r3, r3, #20
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a16      	ldr	r2, [pc, #88]	@ (80041f0 <TIM_OC6_SetConfig+0xb0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00b      	beq.n	80041b4 <TIM_OC6_SetConfig+0x74>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a15      	ldr	r2, [pc, #84]	@ (80041f4 <TIM_OC6_SetConfig+0xb4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_OC6_SetConfig+0x74>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a14      	ldr	r2, [pc, #80]	@ (80041f8 <TIM_OC6_SetConfig+0xb8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC6_SetConfig+0x74>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a13      	ldr	r2, [pc, #76]	@ (80041fc <TIM_OC6_SetConfig+0xbc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d109      	bne.n	80041c8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	029b      	lsls	r3, r3, #10
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800422a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 030a 	bic.w	r3, r3, #10
 800423c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800425e:	b480      	push	{r7}
 8004260:	b087      	sub	sp, #28
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f023 0210 	bic.w	r2, r3, #16
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	031b      	lsls	r3, r3, #12
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	f043 0307 	orr.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800430e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	431a      	orrs	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	609a      	str	r2, [r3, #8]
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2201      	movs	r2, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	43db      	mvns	r3, r3
 8004356:	401a      	ands	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004394:	2302      	movs	r3, #2
 8004396:	e054      	b.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a24      	ldr	r2, [pc, #144]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d108      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004400:	d009      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a13      	ldr	r2, [pc, #76]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a11      	ldr	r2, [pc, #68]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10c      	bne.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800441c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	4313      	orrs	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40000400 	.word	0x40000400
 8004458:	40014000 	.word	0x40014000

0800445c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e040      	b.n	80044f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc fb3e 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	@ 0x24
 8004488:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f9e8 	bl	8004878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f8af 	bl	800460c <UART_SetConfig>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e01b      	b.n	80044f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fa67 	bl	80049bc <UART_CheckIdleState>
 80044ee:	4603      	mov	r3, r0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	@ 0x28
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800450c:	2b20      	cmp	r3, #32
 800450e:	d177      	bne.n	8004600 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_UART_Transmit+0x24>
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e070      	b.n	8004602 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2221      	movs	r2, #33	@ 0x21
 800452c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452e:	f7fc fbf1 	bl	8000d14 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800454c:	d108      	bne.n	8004560 <HAL_UART_Transmit+0x68>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e003      	b.n	8004568 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004568:	e02f      	b.n	80045ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	@ 0x80
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fac9 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e03b      	b.n	8004602 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	b292      	uxth	r2, r2
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	3302      	adds	r3, #2
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e007      	b.n	80045b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3301      	adds	r3, #1
 80045b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1c9      	bne.n	800456a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	2140      	movs	r1, #64	@ 0x40
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fa93 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e005      	b.n	8004602 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b8a      	ldr	r3, [pc, #552]	@ (8004860 <UART_SetConfig+0x254>)
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	6979      	ldr	r1, [r7, #20]
 8004640:	430b      	orrs	r3, r1
 8004642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a78      	ldr	r2, [pc, #480]	@ (8004864 <UART_SetConfig+0x258>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d120      	bne.n	80046ca <UART_SetConfig+0xbe>
 8004688:	4b77      	ldr	r3, [pc, #476]	@ (8004868 <UART_SetConfig+0x25c>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b03      	cmp	r3, #3
 8004692:	d817      	bhi.n	80046c4 <UART_SetConfig+0xb8>
 8004694:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <UART_SetConfig+0x90>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046b9 	.word	0x080046b9
 80046a4:	080046bf 	.word	0x080046bf
 80046a8:	080046b3 	.word	0x080046b3
 80046ac:	2300      	movs	r3, #0
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e01d      	b.n	80046ee <UART_SetConfig+0xe2>
 80046b2:	2302      	movs	r3, #2
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e01a      	b.n	80046ee <UART_SetConfig+0xe2>
 80046b8:	2304      	movs	r3, #4
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e017      	b.n	80046ee <UART_SetConfig+0xe2>
 80046be:	2308      	movs	r3, #8
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e014      	b.n	80046ee <UART_SetConfig+0xe2>
 80046c4:	2310      	movs	r3, #16
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e011      	b.n	80046ee <UART_SetConfig+0xe2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a67      	ldr	r2, [pc, #412]	@ (800486c <UART_SetConfig+0x260>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d102      	bne.n	80046da <UART_SetConfig+0xce>
 80046d4:	2300      	movs	r3, #0
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e009      	b.n	80046ee <UART_SetConfig+0xe2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a64      	ldr	r2, [pc, #400]	@ (8004870 <UART_SetConfig+0x264>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d102      	bne.n	80046ea <UART_SetConfig+0xde>
 80046e4:	2300      	movs	r3, #0
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e001      	b.n	80046ee <UART_SetConfig+0xe2>
 80046ea:	2310      	movs	r3, #16
 80046ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f6:	d15a      	bne.n	80047ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80046f8:	7ffb      	ldrb	r3, [r7, #31]
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d827      	bhi.n	800474e <UART_SetConfig+0x142>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <UART_SetConfig+0xf8>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004729 	.word	0x08004729
 8004708:	08004731 	.word	0x08004731
 800470c:	08004739 	.word	0x08004739
 8004710:	0800474f 	.word	0x0800474f
 8004714:	0800473f 	.word	0x0800473f
 8004718:	0800474f 	.word	0x0800474f
 800471c:	0800474f 	.word	0x0800474f
 8004720:	0800474f 	.word	0x0800474f
 8004724:	08004747 	.word	0x08004747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004728:	f7fe fd44 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800472c:	61b8      	str	r0, [r7, #24]
        break;
 800472e:	e013      	b.n	8004758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004730:	f7fe fd62 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 8004734:	61b8      	str	r0, [r7, #24]
        break;
 8004736:	e00f      	b.n	8004758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004738:	4b4e      	ldr	r3, [pc, #312]	@ (8004874 <UART_SetConfig+0x268>)
 800473a:	61bb      	str	r3, [r7, #24]
        break;
 800473c:	e00c      	b.n	8004758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473e:	f7fe fcd9 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 8004742:	61b8      	str	r0, [r7, #24]
        break;
 8004744:	e008      	b.n	8004758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800474a:	61bb      	str	r3, [r7, #24]
        break;
 800474c:	e004      	b.n	8004758 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	77bb      	strb	r3, [r7, #30]
        break;
 8004756:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d074      	beq.n	8004848 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	005a      	lsls	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b0f      	cmp	r3, #15
 8004778:	d916      	bls.n	80047a8 <UART_SetConfig+0x19c>
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004780:	d212      	bcs.n	80047a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f023 030f 	bic.w	r3, r3, #15
 800478a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	b29b      	uxth	r3, r3
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	b29a      	uxth	r2, r3
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	4313      	orrs	r3, r2
 800479c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	89fa      	ldrh	r2, [r7, #14]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	e04f      	b.n	8004848 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77bb      	strb	r3, [r7, #30]
 80047ac:	e04c      	b.n	8004848 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ae:	7ffb      	ldrb	r3, [r7, #31]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d828      	bhi.n	8004806 <UART_SetConfig+0x1fa>
 80047b4:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <UART_SetConfig+0x1b0>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	08004807 	.word	0x08004807
 80047cc:	080047f7 	.word	0x080047f7
 80047d0:	08004807 	.word	0x08004807
 80047d4:	08004807 	.word	0x08004807
 80047d8:	08004807 	.word	0x08004807
 80047dc:	080047ff 	.word	0x080047ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fe fce8 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80047e4:	61b8      	str	r0, [r7, #24]
        break;
 80047e6:	e013      	b.n	8004810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fe fd06 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 80047ec:	61b8      	str	r0, [r7, #24]
        break;
 80047ee:	e00f      	b.n	8004810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f0:	4b20      	ldr	r3, [pc, #128]	@ (8004874 <UART_SetConfig+0x268>)
 80047f2:	61bb      	str	r3, [r7, #24]
        break;
 80047f4:	e00c      	b.n	8004810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f6:	f7fe fc7d 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80047fa:	61b8      	str	r0, [r7, #24]
        break;
 80047fc:	e008      	b.n	8004810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004802:	61bb      	str	r3, [r7, #24]
        break;
 8004804:	e004      	b.n	8004810 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	77bb      	strb	r3, [r7, #30]
        break;
 800480e:	bf00      	nop
    }

    if (pclk != 0U)
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	085a      	lsrs	r2, r3, #1
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	441a      	add	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b0f      	cmp	r3, #15
 800482e:	d909      	bls.n	8004844 <UART_SetConfig+0x238>
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004836:	d205      	bcs.n	8004844 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	b29a      	uxth	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	e001      	b.n	8004848 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004854:	7fbb      	ldrb	r3, [r7, #30]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	efff69f3 	.word	0xefff69f3
 8004864:	40013800 	.word	0x40013800
 8004868:	40021000 	.word	0x40021000
 800486c:	40004400 	.word	0x40004400
 8004870:	40004800 	.word	0x40004800
 8004874:	007a1200 	.word	0x007a1200

08004878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01a      	beq.n	800498e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004976:	d10a      	bne.n	800498e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b098      	sub	sp, #96	@ 0x60
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049cc:	f7fc f9a2 	bl	8000d14 <HAL_GetTick>
 80049d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d12e      	bne.n	8004a3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e8:	2200      	movs	r2, #0
 80049ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f88c 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d021      	beq.n	8004a3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e6      	bne.n	80049fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e062      	b.n	8004b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d149      	bne.n	8004ae0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a54:	2200      	movs	r2, #0
 8004a56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f856 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d03c      	beq.n	8004ae0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	623b      	str	r3, [r7, #32]
   return(result);
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e6      	bne.n	8004a66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab8:	61fa      	str	r2, [r7, #28]
 8004aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e011      	b.n	8004b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3758      	adds	r7, #88	@ 0x58
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1c:	e04f      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b24:	d04b      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fc f8f5 	bl	8000d14 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e04e      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d037      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b80      	cmp	r3, #128	@ 0x80
 8004b52:	d034      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b40      	cmp	r3, #64	@ 0x40
 8004b58:	d031      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d110      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f838 	bl	8004be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e029      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b98:	d111      	bne.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f81e 	bl	8004be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e00f      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0a0      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b095      	sub	sp, #84	@ 0x54
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e5      	bne.n	8004c20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d118      	bne.n	8004c8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 0310 	bic.w	r3, r3, #16
 8004c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6979      	ldr	r1, [r7, #20]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	613b      	str	r3, [r7, #16]
   return(result);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e6      	bne.n	8004c5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ca2:	bf00      	nop
 8004ca4:	3754      	adds	r7, #84	@ 0x54
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <memset>:
 8004cae:	4402      	add	r2, r0
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d100      	bne.n	8004cb8 <memset+0xa>
 8004cb6:	4770      	bx	lr
 8004cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbc:	e7f9      	b.n	8004cb2 <memset+0x4>
	...

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1b64      	subs	r4, r4, r5
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2600      	movs	r6, #0
 8004ccc:	42a6      	cmp	r6, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f000 f818 	bl	8004d08 <_init>
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2600      	movs	r6, #0
 8004cde:	42a6      	cmp	r6, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce8:	4798      	blx	r3
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf2:	4798      	blx	r3
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08004d60 	.word	0x08004d60
 8004cfc:	08004d60 	.word	0x08004d60
 8004d00:	08004d60 	.word	0x08004d60
 8004d04:	08004d64 	.word	0x08004d64

08004d08 <_init>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr

08004d14 <_fini>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr
